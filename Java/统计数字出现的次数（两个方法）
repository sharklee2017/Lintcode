题目：统计一个数字在排序数组中出现的次数。例如输入排序数组{1,2,3,3,3,3,4,5}和数字3，由于3在这个数组中出现了4次，因此输出4.
思路：
用二分查找，分别找出第一个3，和最后一个3的位置，然后计算个数。
时间复杂度O（logn）
public class GetNumberOfK {

	public static void main(String[] args) {

	}

	/**
	 * 题目描述 统计一个数字在排序数组中出现的次数。 <br/>
	 * 解题思路 数组是排序的，所以重复出现的数字是相邻排列的。 用二分查找算法，找到第一次出现的位置，和 最后一次出现的位置。
	 * 判断第一次出现的位置条件为：当前数字的前一个是否与之相等，若是则继续查找，否则该位置就是第一次出现的位置。
	 * 判断最后一次出现的位置条件为：当前数字的后一个是否与之相等，若是则继续查找，否则该位置就是最后一次出现的位置。 出现的次数= last -
	 * first +1
	 * 时间复杂度：O(logn)
	 * 
	 * @param array
	 * @param k
	 * @return
	 */
public class Demo {
	
	public static void main(String[] args) {
	

	}

	public static int GetNumberOfK(int[] array, int k) {
		int result = 0;
		if (array == null || array.length == 0) {
			return 0;
		}
		int firstIndex = firstPosition(array, k);
		int lastIndex = lastPosition(array, k);

		if (firstIndex > -1 && lastIndex > -1) {
			result = lastIndex - firstIndex + 1;
		}

		return result;
	}

	public static int lastPosition(int[] nums, int target) {

		int start = 0, end = nums.length - 1;
		while (start + 1 < end) {
			int mid = start + (end - start) / 2;
			if (nums[mid] <= target) {
				start = mid;
			} else {
				end = mid;
			}
		}

		if (nums[end] == target) {
			return end;
		}
		if (nums[start] == target) {
			return start;
		}
		return -1;
	}

	public static int firstPosition(int[] nums, int target) {

		int start = 0, end = nums.length - 1;
		while (start + 1 < end) {
			int mid = start + (end - start) / 2;
			if (nums[mid] >= target) {
				end = mid;
			} else {
				start = mid;
			}
		}

		if (nums[start] == target) {
			return start;
		}
		if (nums[end] == target) {
			return end;
		}
		return -1;
	}

}

方法2：输出所有数字出现的次数，并从控制台不定长接收数组
import java.util.Scanner;
import java.util.Set;
import java.util.TreeMap;

/*
 * 分析：
 *         A:定义一个字符串(可以改进为键盘录入)
 *         B:定义一个TreeMap集合
 *             键: Integer
 *             值：Integer
 *         C:把字符串切割字符串数组
 *         D:遍历字符串数组，得到每一个int数组
 *         E:拿刚才得到的字符作为键到集合中去找值，看返回值
 *             是null:说明该键不存在，就把该字符作为键，1作为值存储
 *             不是null:说明该键存在，就把值加1，然后重写存储该键和值
 *         F:定义字符串缓冲区变量
 *         G:遍历集合，得到键和值，进行按照要求拼接
 *         H:把字符串缓冲区转换为字符串输出
 * 结果：result:a(1)g(1)i(3)l(1)n(2)q(1)x(1)
 */
public class mapdemo {
	public static void main(String[] args) {
		// 定义一个字符串(可以改进为键盘录入)
		Scanner sc = new Scanner(System.in);
		System.out.println("请输入一个字符串：");
		String line = sc.nextLine();
		String[] strings = line.split(",");
		int[] chs = new int[strings.length];
		for (int i = 0; i < strings.length; i++) {
			chs[i] = Integer.parseInt(strings[i]);
		}
		// 定义一个TreeMap集合
		TreeMap<Integer, Integer> tm = new TreeMap<Integer, Integer>();
		// 遍历字符数组，得到每一个字符
		for (int ch : chs) {
			// 拿刚才得到的字符作为键到集合中去找值，看返回值
			Integer i = tm.get(ch);

			// 是null:说明该键不存在，就把该字符作为键，1作为值存储
			if (i == null) {
				tm.put(ch, 1);
			} else {
				// 不是null:说明该键存在，就把值加1，然后重写存储该键和值
				i++;
				tm.put(ch, i);
			}
		}
		// 定义字符串缓冲区变量
		StringBuilder sb = new StringBuilder();
		// 遍历集合，得到键和值，进行按照要求拼接
		Set<Integer> set = tm.keySet();
		for (int key : set) {
			Integer value = tm.get(key);
			sb.append(key).append("(").append(value).append(")");
		}

		// 把字符串缓冲区转换为字符串输出
		String result = sb.toString();
		System.out.println("result:" + result);
	}
}

