描述：设计一个算法，计算出n阶乘中尾部零的个数
解决办法：假如你把1 × 2 ×３× 4 ×……×N中每一个因数分解质因数，结果就像： 
1 × 2 × 3 × (2 × 2) × 5 × (2 × 3) × 7 × (2 × 2 ×2) ×…… 
10进制数结尾的每一个0都表示有一个因数10存在——任何进制都一样，对于一个M进制的数，让结尾多一个0就等价于乘以M。 
10可以分解为2 × 5——因此只有质数2和5相乘能产生0，别的任何两个质数相乘都不能产生0，而且2，5相乘只产生一个0。 
所以，分解后的整个因数式中有多少对(2, 5)，结果中就有多少个0，而分解的结果中，2的个数显然是多于5的，因此，有多少个5，就有多少个(2, 5)对。 
总结：第一步：temp/5，计算出来的是有多少个（2，5）对，例：5、10、15、20、25、30、35、40、45、50、55、60.....
     第二步：temp/5/5计算的是（2,5*5）对，例：25、50、75、100.....
     。。。。
     直到temp为0.
class Solution {
    /*
     * param n: An desciption
     * return: An integer, denote the number of trailing zeros in n!
     */
    public long trailingZeros(long n) {
        // write your code here
	     long count=0;;
	     long temp=n/5;
	     while(temp!=0){
	         count+=temp;
	         temp/=5;
	     }
	     return count;
	      
    }
};
