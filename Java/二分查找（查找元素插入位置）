Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.
[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0
思路：利用二分查找模板，此时不同的在于返回值条件有所改变，当target比最终剩余的两个值中的nums[start]小，那么就要插入到start的位置，如果比nums[end]值要小，
比nums[start]的要大，那就插入到end位置，如果都大于end位置的值，那就返回end+1；相等的情况就直接返回index

class Solution {
    public int searchInsert(int[] nums, int target) {
        if (nums == null || nums.length == 0) {  
            return 0;  
        }  
        int start = 0, end = nums.length - 1;  
        while (start + 1 < end) {  
            int mid = start + (end - start) / 2;  
            if (nums[mid] == target) {  
                return mid;  
            } else if (nums[mid] < target) {  
                start = mid;  
            } else {  
                end = mid;  
            }  
        }  
        if (target <= nums[start]) {  
            return start;  
        }  
        if (target <= nums[end]) {  
            return end;  
        }  
        return end + 1;  
    }
}
